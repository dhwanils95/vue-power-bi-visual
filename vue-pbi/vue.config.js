const path = require('path');
const fs = require("fs");

const webpack = require("webpack");
const PowerBICustomVisualsWebpackPlugin = require('powerbi-visuals-webpack-plugin');
const ExtraWatchWebpackPlugin = require('extra-watch-webpack-plugin');

const powerbiApi = require("powerbi-visuals-api");

const pbivizPath = "./pbiviz.json";
const pbivizFile = require(path.join(__dirname, pbivizPath));

// the visual capabilities content
const capabilitiesPath = "./capabilities.json";
const capabilitiesFile = require(path.join(__dirname, capabilitiesPath));

const pluginLocation = './.tmp/precompile/visualPlugin.ts'; // path to visual plugin file, the file generates by the plugin

const resourcesFolder = path.join(".", "stringResources");
const localizationFolders = fs.existsSync(resourcesFolder) && fs.readdirSync(resourcesFolder);

// babel options to support IE11
const babelOptions = {
  "presets": [
    [
      require.resolve('@babel/preset-env'),
      {
        "targets": {
          "ie": "11"
        },
        useBuiltIns: "entry",
        corejs: 3,
        modules: false
      }
    ]
  ],
  sourceType: "unambiguous", // tell to babel that the project can contains different module types, not only es2015 modules
  cacheDirectory: path.join(".tmp", "babelCache") // path for chace files
};

module.exports = {
  chainWebpack: (config) => {
    config.entry('app').clear()
    config.module.rule('ts').test(/\.tsx?$/).include.add(/powerbi-visuals-|src|precompile\\visualPlugin.ts/).end()
    config.module.rule('tsx').test(/\.tsx?$/).include.add(/powerbi-visuals-|src|precompile\\visualPlugin.ts/).end()
  },
  configureWebpack: {
    entry: {
      "visual.js": pluginLocation
    },
    devtool: 'source-map',
    module: {
      rules: [
        {
          parser: {
            amd: false
          }
        },
        {
          test: /\.json$/,
          loader: require.resolve('json-loader'),
          type: "javascript/auto"
        },
      ]
    },
    output: {
      filename: "[name]",
    },
    devServer: {
      disableHostCheck: true,
      contentBase: path.join(__dirname, ".tmp", "drop"), // path with assets for dev server, they are generated by webpack plugin
      // publicPath: "/assets/",
      compress: true,
      port: 8080, // dev server port
      hot: false,
      inline: false,
      // cert files for dev server
      https: {
        // keep it commented to use webpack generated certificate
        // key: path.join(__dirname, "certs","PowerBICustomVisualTest_public.key"), // for darwin, linux
        // cert: path.join(__dirname, "certs", "PowerBICustomVisualTest_public.cer"), // for darwin, linux
        // pfx: fs.readFileSync(path.join(__dirname, "certs", "PowerBICustomVisualTest_public.pfx")), // for windows
        // passphrase: "5031595470751755"
      },
      headers: {
        "access-control-allow-origin": "*",
        "cache-control": "public, max-age=0"
      },
    },
    externals: {
      "powerbi-visuals-api": 'null',
      "fakeDefine": 'false',
      "corePowerbiObject": "Function('return this.powerbi')()",
      "realWindow": "Function('return this')()"
    },
    plugins: [
      // visual plugin regenerates with the visual source, but it does not require relaunching dev server
      new webpack.WatchIgnorePlugin([
        path.join(__dirname, pluginLocation),
        "./.tmp/**/*.*"
      ]),
      // custom visuals plugin instance with options
      new PowerBICustomVisualsWebpackPlugin({
        ...pbivizFile,
        capabilities: capabilitiesFile,
        stringResources: localizationFolders && localizationFolders.map(localization => path.join(
          resourcesFolder,
          localization,
          "resources.resjson"
        )),
        apiVersion: powerbiApi.version,
        capabilitiesSchema: powerbiApi.schemas.capabilities,
        pbivizSchema: powerbiApi.schemas.pbiviz,
        stringResourcesSchema: powerbiApi.schemas.stringResources,
        dependenciesSchema: powerbiApi.schemas.dependencies,
        devMode: false,
        generatePbiviz: true,
        generateResources: true,
        modules: true,
        visualSourceLocation: "../../src/visual",
        pluginLocation: pluginLocation,
        packageOutPath: path.join(__dirname, "dist")
      }),
      new ExtraWatchWebpackPlugin({
        files: [
          pbivizPath,
          capabilitiesPath
        ]
      }),
      new webpack.ProvidePlugin({
        window: 'realWindow',
        define: 'fakeDefine',
        powerbi: 'corePowerbiObject'
      }),
    ]
  },
  outputDir: path.join(__dirname, "/.tmp", "drop")
};